#!/usr/bin/env perl

use common::sense;

use Algorithm::Networksort;
use Getopt::Long;
use Data::Dumper;

use Algorithm::Networksort::Chooser;


my @opt_spec = (
  'opt=s',
  'median',
  'selection=s',
  'validate',
  'show',
);

my $opt = {
  'opt' => 'comparators',
};

GetOptions($opt, @opt_spec) || die "GetOptions failed";


my $network_size = shift || die "need network size";


my @candidates;

foreach my $algo (Algorithm::Networksort::nw_algorithms()) {
  my @network = Algorithm::Networksort::Chooser::silence_carps(sub {
    Algorithm::Networksort::nw_comparators($network_size, algorithm => $algo)
  });

  push @candidates, {
    algo => $algo,
    network => \@network,
  };
}





if ($opt->{median}) {
  die "--selection and --median are incompatible" if defined $opt->{selection};

  $opt->{selection} = int($network_size / 2);
}


if (defined $opt->{selection}) {
  my $selection = [ split(',', $opt->{selection}) ];

  foreach my $ind (@$selection) {
    die "badly formed selection index: $ind" unless $ind =~ /^\d+$/;
    die "selection index $ind is too large for the network size" if $ind >= $network_size;
  }

  foreach my $candidate (@candidates) {
    $candidate->{network} = Algorithm::Networksort::Chooser::build_selection_network($candidate->{network}, $selection);
  }
}



foreach my $candidate (@candidates) {
  my @network = @{ $candidate->{network} };
  my @grouped_network = Algorithm::Networksort::nw_group(\@network, $network_size, grouping=>'parallel');

  $candidate->{comparators} = (0+@network);
  $candidate->{stages} = (0+@grouped_network);
}




my @sorted_candidates;

if ($opt->{opt} eq 'comparators') {
  @sorted_candidates = sort {
     $a->{comparators} <=> $b->{comparators}
  } @candidates;
} elsif ($opt->{opt} eq 'stages') {
  @sorted_candidates = sort {
     $a->{stages} <=> $b->{stages}
  } @candidates;
} else {
  die "Unknown optimisation criteria: $opt->{opt}";
}




foreach my $result (@sorted_candidates) {
  print "$result->{algo}: $result->{comparators} $result->{stages}\n";
}




1;




=encoding utf-8

=head1 NAME

Algorithm::Networksort::Chooser - Helper utility for Algorithm::Networksort

=head1 DESCRIPTION

The C<algorithm-networksort-chooser> script helps you find the best sorting network for your particular use-case.

    $ algorithm-networksort-chooser 9  ## input array size 9
    $ algorithm-networksort-chooser --range=4-10  ## find best networks for sizes 4-10

    $ algorithm-networksort-chooser 9 --opt=comparators  ## optimise for comparators (default)
    $ algorithm-networksort-chooser 9 --opt=stages  ## optimise for stages

    $ algorithm-networksort-chooser 9 --median  ## best median network
    $ algorithm-networksort-chooser 9 --selection=4  ## best median network
    $ algorithm-networksort-chooser 9 --selection=0,1,2  ## top-3 elements selection net

    $ algorithm-networksort-chooser 9 --validate  ## run 0-1 validation test
    $ algorithm-networksort-chooser 9 --ascii  ## show network as ASCII diagram



=head1 FUTURE IDEAS

Optimise by average-swaps using combinatoric analysis

Algorithm::Networksort::Validate::XS



=head1 SEE ALSO

L<Algorithm-Networksort-Chooser github repo|https://github.com/hoytech/Algorithm-Networksort-Chooser>

=head1 AUTHOR

Doug Hoyte, C<< <doug@hcsw.org> >>

=head1 COPYRIGHT & LICENSE

Copyright 2013 Doug Hoyte.

This module is licensed under the same terms as perl itself.
